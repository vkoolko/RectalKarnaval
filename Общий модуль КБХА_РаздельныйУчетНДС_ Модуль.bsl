
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроведениеПервичногоДокументаПоРаздельномуУчетуНДС(СтруктураИсточника, Отказ, РежимПроведения) Экспорт
	

КонецПроцедуры

Процедура КБХА_ПриПроведенииДокументовРаздельныйУчетНДСОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	СтруктураИсточника = Новый Структура();
	СтруктураИсточника.Вставить("мСтруктураШапкиДокумента",Источник.ДополнительныеСвойства.СтруктураШапкиДокумента);
	СтруктураИсточника.Вставить("мСтруктураТабличныхЧастей",Источник.ДополнительныеСвойства.СтруктураТабличныхЧастей);
	СтруктураИсточника.Вставить("Ссылка",Источник.Ссылка);
	СтруктураИсточника.Вставить("Дата",Источник.Дата);
	
	СтруктураИсточника.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтруктураИсточника.Вставить("ОтражатьВБухгалтерскомУчете",Ложь);
	СтруктураИсточника.Вставить("ОтражатьВНалоговомУчете",Ложь);
	
	ЗаполнитьЗначенияСвойств(СтруктураИсточника, Источник); 
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ПроведениеПервичногоДокументаПоРаздельномуУчетуНДС(СтруктураИсточника, Отказ, РежимПроведения);
	КонецЕсли;	
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроведениеДокументовПоРаздельномуУчетуНДС(НачалоПериода, КонецПериода, Организация, Документ = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетЗатратРегл.Регистратор,
	|	УчетЗатратРегл.Период КАК Период
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ПО УчетЗатратРегл.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|ГДЕ
	|	РегистрАналитикаВидаУчета.Организация = &Организация
	|	И РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыНаВыпуск))
	|	И ВЫБОР
	|			КОГДА &Документ = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УчетЗатратРегл.Регистратор = &Документ
	|		КОНЕЦ
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПровестиДокументПоРаздельномуУчетуНДС(Выборка.Регистратор);
	КонецЦикла;

КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьНовуюАналитикуУчетаНДССогласноПодобраннымПартиям(Выборка)
	
	СтруктураКлюча = Справочники.КБХА_КлючиАналитикиУчетаНДС.ПолучитьСтруктуруРеквизитовСправочника();
	ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка.АналитикаУчетаНДСОстатков);
	СтруктураКлюча.КР_СпособУчетаНДС = Выборка.НовыйСпособУчетаНДС;
	Если Выборка.НужноВосстанавливать Тогда // Если восстанавливаем, то меняем партию и ставим код 25
		СтруктураКлюча.Партия 		   = Выборка.Регистратор;
		СтруктураКлюча.КодВидаОперации = "25";
	КонецЕсли;
	
	Возврат Справочники.КБХА_КлючиАналитикиУчетаНДС.ПолучитьКлючАналитикиУчетаНДС(СтруктураКлюча);
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьДвижениеВосстановлениеНДС(ТаблицаДляФормированияДвижений, Выборка, СтруктураРесурсов)
	
	ЗаписьПриход = ТаблицаДляФормированияДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьПриход, Выборка, ,"КорАналитикаВидаУчета, КорАналитикаУчетаЗатрат, КорАналитикаРаспределенияЗатрат, Количество");
	ЗаписьПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
	ЗаписьПриход.АналитикаВидаУчета			  = Выборка.АналитикаВидаУчета;
	ЗаписьПриход.АналитикаУчетаЗатрат 		  = Выборка.АналитикаУчетаЗатрат;
	ЗаписьПриход.АналитикаРаспределенияЗатрат = Выборка.АналитикаРаспределенияЗатрат;
	ЗаписьПриход.АналитикаУчетаНДС 		  	  = Выборка.АналитикаУчетаНДСОстатков;
	
	ЗаписьПриход.СуммаБезНДС = Выборка.СуммаБезНДСЗачтено / Выборка.КоличествоЗачтено * СтруктураРесурсов.ТекущееКоличество;
	ЗаписьПриход.НДС		 = Выборка.НДСЗачтено / Выборка.КоличествоЗачтено * СтруктураРесурсов.ТекущееКоличество;
	
	ЗаписьПриход.Событие     		  = Перечисления.СобытияПоНДСПокупки.ВосстановленНДС;
	ЗаписьПриход.СобытиеНаборовЗаписей = "ВосстановлениеНДС";
	
	Возврат ЗаписьПриход;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьДвижениеИзменениеАналитикиУчетаНДС(ТаблицаДляФормированияДвижений, Выборка, АналитикаУчетаНДСПолучатель, СтруктураРесурсов)
	
	ЗаписьРасход = ТаблицаДляФормированияДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьРасход, Выборка);
	ЗаписьРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
	ЗаписьРасход.АналитикаВидаУчета			  = Выборка.АналитикаВидаУчета;
	ЗаписьРасход.АналитикаУчетаЗатрат 		  = Выборка.АналитикаУчетаЗатрат;
	ЗаписьРасход.АналитикаРаспределенияЗатрат = Выборка.АналитикаРаспределенияЗатрат;
	ЗаписьРасход.АналитикаУчетаНДС 		  	  = Выборка.АналитикаУчетаНДСОстатков;
	
	ЗаписьРасход.КорАналитикаВидаУчета			 = Выборка.АналитикаВидаУчета;
	ЗаписьРасход.КорАналитикаУчетаЗатрат 		 = Выборка.АналитикаУчетаЗатрат;
	ЗаписьРасход.КорАналитикаРаспределенияЗатрат = Выборка.АналитикаРаспределенияЗатрат;
	ЗаписьРасход.КорАналитикаУчетаНДС 		     = АналитикаУчетаНДСПолучатель;
	
	ЗаписьРасход.Количество  = СтруктураРесурсов.ТекущееКоличество;
	ЗаписьРасход.СуммаБезНДС = СтруктураРесурсов.СуммаБезНДС;
	ЗаписьРасход.НДС		 = СтруктураРесурсов.НДС;
	ЗаписьРасход.Событие 	 = Перечисления.КБХА_СобытияНДСПокупки.ИзменениеАналитикиУчетаНДС;
	Если Выборка.НовыйСпособУчетаНДС <> Выборка.СтарыйСпособУчетаНДС Тогда
		ЗаписьРасход.СобытиеНаборовЗаписей = "ИзменениеСпособаУчетаНДС";
	КонецЕсли;	
	
	КорЗапись = СформироватьОбратнуюКорреспондирующуюЗапись(ТаблицаДляФормированияДвижений, ЗаписьРасход);
	КорЗапись.Событие = ЗаписьРасход.Событие;
	
	Возврат КорЗапись;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьДвижениеСписаниеНДСВСтоимость(ТаблицаДляФормированияДвижений, ЗаписьИсточник, ВыборкаПоПартиям)

	Параметры = Новый Структура;
	Параметры.Вставить("СчетУчетаНДС", ВыборкаПоПартиям.СчетУчетаНДС);
	Параметры.Вставить("СчетЗатрат", ВыборкаПоПартиям.СчетУчета);
	Параметры.Вставить("ИсходнаяСтатьяЗатрат", ВыборкаПоПартиям.СтатьяЗатрат);
	СтатьяЗатратДляВключенияНДСВСтоимость = ПолучитьСтатьюЗатратНДСДляВключенияВСтоимость(Параметры, ВыборкаПоПартиям);
	Если СтатьяЗатратДляВключенияНДСВСтоимость = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыКлючаАналитики = Новый Структура;
	ПараметрыКлючаАналитики.Вставить("СтатьяЗатрат", СтатьяЗатратДляВключенияНДСВСтоимость);
	ПараметрыКлючаАналитики.Вставить("СчетУчета", ВыборкаПоПартиям.СчетУчета);
	
	НоваяЗапись = ТаблицаДляФормированияДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьИсточник);
	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
	
	НоваяЗапись.КорАналитикаВидаУчета = ЗаписьИсточник.АналитикаВидаУчета;
	НоваяЗапись.КорАналитикаРаспределенияЗатрат = ЗаписьИсточник.АналитикаРаспределенияЗатрат;
	НоваяЗапись.КорАналитикаУчетаЗатрат = ПолучитьКлючАналитикиУчетаЗатрат(ПараметрыКлючаАналитики);
	НоваяЗапись.КорАналитикаУчетаНДС = "";
	НоваяЗапись.СтатьяЗатратВключениеНДСВСтоимость = СтатьяЗатратДляВключенияНДСВСтоимость;
	НоваяЗапись.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
	НоваяЗапись.СобытиеНаборовЗаписей = "ВключениеНДСВСтоимость";

КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьОбратнуюКорреспондирующуюЗапись(ТаблицаДляФормированияДвижений, ЗаписьИсточник)
	
	НоваяЗапись = ТаблицаДляФормированияДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьИсточник,,"СобытиеНаборовЗаписей");
	Если ЗаписьИсточник.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
	Иначе
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	НоваяЗапись.АналитикаВидаУчета 			 = ЗаписьИсточник.КорАналитикаВидаУчета;
	НоваяЗапись.АналитикаУчетаЗатрат 		 = ЗаписьИсточник.КорАналитикаУчетаЗатрат;
	НоваяЗапись.АналитикаРаспределенияЗатрат = ЗаписьИсточник.КорАналитикаРаспределенияЗатрат;
	НоваяЗапись.АналитикаУчетаНДС 			 = ЗаписьИсточник.КорАналитикаУчетаНДС;
	
	НоваяЗапись.КорАналитикаВидаУчета 			= ЗаписьИсточник.АналитикаВидаУчета;
	НоваяЗапись.КорАналитикаУчетаЗатрат 		= ЗаписьИсточник.АналитикаУчетаЗатрат;
	НоваяЗапись.КорАналитикаРаспределенияЗатрат = ЗаписьИсточник.АналитикаРаспределенияЗатрат;
	НоваяЗапись.КорАналитикаУчетаНДС 			= ЗаписьИсточник.АналитикаУчетаНДС;
	
	НоваяЗапись.Количество  = ЗаписьИсточник.Количество;
	НоваяЗапись.СуммаБезНДС = ЗаписьИсточник.СуммаБезНДС;
	НоваяЗапись.НДС 		= ЗаписьИсточник.НДС;
	НоваяЗапись.Событие = ЗаписьИсточник.Событие;
	
	Возврат НоваяЗапись;

КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТекстЗапросаДляПроведенияДокументаПоРаздельномуУчетуНДС()

	Текст =
	"ВЫБРАТЬ
	|	УчетЗатратРегл.ВидДвижения,
	|	УчетЗатратРегл.Регистратор,
	|	УчетЗатратРегл.Регистратор.Дата КАК Период,
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.Количество,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.КодОперации,
	|	ВЫБОР
	|		КОГДА РегистрКорАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.Распределяется)
	|		КОГДА РегистрКорАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыНаВыпуск))
	|			ТОГДА ВЫБОР
	|					КОГДА РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.ПринимаетсяКВычету)
	|					КОГДА РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.ДляОперацийПо0)
	|					КОГДА РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.УчитываетсяВСтоимости)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.ПустаяСсылка)
	|	КОНЕЦ КАК НовыйСпособУчетаНДС,
	|	ВЫБОР
	|		КОГДА РегистрКорАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыНаВыпуск))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормироватьПриход,
	|	УчетЗатратРегл.НомерСтроки,
	|	РегистрКорАналитикаВидаУчета.СчетУчета КАК СчетУчетаПолучатель,
	|	РегистрКорАналитикаВидаУчета.РазделУчета КАК РазделУчетаПолучатель,
	|	РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	РегистрКорАналитикаВидаУчета.Организация,
	|	РегистрКорАналитикаУчетаЗатрат.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК ЗатратаПолучатель,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаЗатратыПолучатель,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияЗатратыПолучатель,
	|	РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель
	|ПОМЕСТИТЬ #ДанныеРАУЗ
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
	|		ПО УчетЗатратРегл.КорАналитикаВидаУчета = РегистрКорАналитикаВидаУчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрКорАналитикаРаспределенияЗатрат
	|		ПО УчетЗатратРегл.КорАналитикаРаспределенияЗатрат = РегистрКорАналитикаРаспределенияЗатрат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрКорАналитикаУчетаЗатрат
	|		ПО УчетЗатратРегл.КорАналитикаУчетаЗатрат = РегистрКорАналитикаУчетаЗатрат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ПО УчетЗатратРегл.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|ГДЕ
	|	УчетЗатратРегл.Регистратор = &Документ
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРАУЗ.ВидДвижения,
	|	ДанныеРАУЗ.Регистратор,
	|	ДанныеРАУЗ.Период,
	|	ДанныеРАУЗ.АналитикаВидаУчета,
	|	ДанныеРАУЗ.АналитикаУчетаЗатрат,
	|	ДанныеРАУЗ.АналитикаРаспределенияЗатрат,
	|	ДанныеРАУЗ.Количество,
	|	ДанныеРАУЗ.КорАналитикаВидаУчета,
	|	ДанныеРАУЗ.КорАналитикаУчетаЗатрат,
	|	ДанныеРАУЗ.КорАналитикаРаспределенияЗатрат,
	|	ДанныеРАУЗ.КодОперации,
	|	ДанныеРАУЗ.НовыйСпособУчетаНДС,
	|	ДанныеРАУЗ.СчетУчетаПолучатель,
	|	ДанныеРАУЗ.НоменклатурнаяГруппаПолучатель,
	|	ДанныеРАУЗ.ФормироватьПриход,
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаНДС,
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаНДС.КР_СпособУчетаНДС КАК СтарыйСпособУчетаНДС,
	|	КБХА_РаздельныйУчетНДСОстатки.КоличествоОстаток,
	|	КБХА_РаздельныйУчетНДСОстатки.СуммаБезНДСОстаток,
	|	КБХА_РаздельныйУчетНДСОстатки.НДСОстаток,
	|	ВЫБОР
	|		КОГДА КБХА_РаздельныйУчетНДСОстатки.НДСОстаток = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноВосстанавливать,
	|	ДанныеРАУЗ.НомерСтроки,
	|	ДанныеРАУЗ.РазделУчетаПолучатель,
	|	ДанныеРАУЗ.Организация,
	|	ДанныеРАУЗ.СтатьяЗатратПолучатель,
	|	ДанныеРАУЗ.ЗатратаПолучатель,
	|	ДанныеРАУЗ.ХарактеристикаЗатратыПолучатель,
	|	ДанныеРАУЗ.СерияЗатратыПолучатель,
	|	ДанныеРАУЗ.ПодразделениеОрганизацииПолучатель
	|ПОМЕСТИТЬ #ДанныеРАУЗСПартиямиНДС
	|ИЗ
	|	#ДанныеРАУЗ КАК ДанныеРАУЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КБХА_РаздельныйУчетНДС.Остатки(&МоментИсключая, ) КАК КБХА_РаздельныйУчетНДСОстатки
	|		ПО ДанныеРАУЗ.АналитикаВидаУчета = КБХА_РаздельныйУчетНДСОстатки.АналитикаВидаУчета
	|			И ДанныеРАУЗ.АналитикаУчетаЗатрат = КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаЗатрат
	|			И ДанныеРАУЗ.АналитикаРаспределенияЗатрат = КБХА_РаздельныйУчетНДСОстатки.АналитикаРаспределенияЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КБХА_РаздельныйУчетНДС.АналитикаВидаУчета,
	|	КБХА_РаздельныйУчетНДС.АналитикаУчетаЗатрат,
	|	КБХА_РаздельныйУчетНДС.АналитикаРаспределенияЗатрат,
	|	КБХА_РаздельныйУчетНДС.АналитикаУчетаНДС,
	|	КБХА_РаздельныйУчетНДС.СуммаБезНДС КАК СуммаБезНДСЗачтено,
	|	КБХА_РаздельныйУчетНДС.НДС КАК НДСЗачтено,
	|	КБХА_РаздельныйУчетНДС.КоличествоКВычету КАК КоличествоЗачтено
	|ПОМЕСТИТЬ #ТаблицаДляВосстановленияНДС
	|ИЗ
	|	РегистрНакопления.КБХА_РаздельныйУчетНДС КАК КБХА_РаздельныйУчетНДС
	|ГДЕ
	|	КБХА_РаздельныйУчетНДС.Период <= &Период
	|	И КБХА_РаздельныйУчетНДС.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|	И (КБХА_РаздельныйУчетНДС.АналитикаВидаУчета, КБХА_РаздельныйУчетНДС.АналитикаУчетаЗатрат, КБХА_РаздельныйУчетНДС.АналитикаРаспределенияЗатрат, КБХА_РаздельныйУчетНДС.АналитикаУчетаНДС) В
	|			(ВЫБРАТЬ
	|				Т.АналитикаВидаУчета,
	|				Т.АналитикаУчетаЗатрат,
	|				Т.АналитикаРаспределенияЗатрат,
	|				Т.АналитикаУчетаНДС
	|			ИЗ
	|				#ДанныеРАУЗСПартиямиНДС КАК Т
	|			ГДЕ
	|				Т.НужноВосстанавливать)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРАУЗСПартиямиНДС.ВидДвижения,
	|	ДанныеРАУЗСПартиямиНДС.Регистратор,
	|	ДанныеРАУЗСПартиямиНДС.Период КАК Период,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаВидаУчета КАК АналитикаВидаУчета,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	|	ДанныеРАУЗСПартиямиНДС.Количество КАК Количество,
	|	ДанныеРАУЗСПартиямиНДС.КорАналитикаВидаУчета КАК КорАналитикаВидаУчета,
	|	ДанныеРАУЗСПартиямиНДС.КорАналитикаУчетаЗатрат КАК КорАналитикаУчетаЗатрат,
	|	ДанныеРАУЗСПартиямиНДС.КорАналитикаРаспределенияЗатрат КАК КорАналитикаРаспределенияЗатрат,
	|	ДанныеРАУЗСПартиямиНДС.КодОперации,
	|	ДанныеРАУЗСПартиямиНДС.СчетУчетаПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.НоменклатурнаяГруппаПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.ФормироватьПриход,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС КАК АналитикаУчетаНДСОстатков,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС.СчетФактура.Контрагент КАК Контрагент,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС.СчетФактура КАК СчетФактура,
	|	ДанныеРАУЗСПартиямиНДС.СтарыйСпособУчетаНДС КАК СтарыйСпособУчетаНДС,
	|	ДанныеРАУЗСПартиямиНДС.НовыйСпособУчетаНДС КАК НовыйСпособУчетаНДС,
	|	ДанныеРАУЗСПартиямиНДС.КоличествоОстаток,
	|	ДанныеРАУЗСПартиямиНДС.СуммаБезНДСОстаток,
	|	ДанныеРАУЗСПартиямиНДС.НДСОстаток,
	|	ДанныеРАУЗСПартиямиНДС.НужноВосстанавливать,
	|	ТаблицаДляВосстановленияНДС.СуммаБезНДСЗачтено,
	|	ТаблицаДляВосстановленияНДС.НДСЗачтено,
	|	ТаблицаДляВосстановленияНДС.КоличествоЗачтено,
	|	ВЫБОР
	|		КОГДА ДанныеРАУЗСПартиямиНДС.НовыйСпособУчетаНДС = ДанныеРАУЗСПартиямиНДС.СтарыйСпособУчетаНДС
	|			ТОГДА 1
	|		КОГДА ДанныеРАУЗСПартиямиНДС.НДСОстаток > 0
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПриоритетПартий,
	|	ДанныеРАУЗСПартиямиНДС.НомерСтроки КАК НомерСтроки,
	|	ДанныеРАУЗСПартиямиНДС.РазделУчетаПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.Организация,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС.ВидЦенности КАК ВидЦенности,
	|	ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРАУЗСПартиямиНДС.СтатьяЗатратПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.ЗатратаПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.ХарактеристикаЗатратыПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.СерияЗатратыПолучатель,
	|	ДанныеРАУЗСПартиямиНДС.ПодразделениеОрганизацииПолучатель
	|ИЗ
	|	#ДанныеРАУЗСПартиямиНДС КАК ДанныеРАУЗСПартиямиНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаДляВосстановленияНДС КАК ТаблицаДляВосстановленияНДС
	|		ПО ДанныеРАУЗСПартиямиНДС.АналитикаВидаУчета = ТаблицаДляВосстановленияНДС.АналитикаВидаУчета
	|			И ДанныеРАУЗСПартиямиНДС.АналитикаУчетаЗатрат = ТаблицаДляВосстановленияНДС.АналитикаУчетаЗатрат
	|			И ДанныеРАУЗСПартиямиНДС.АналитикаРаспределенияЗатрат = ТаблицаДляВосстановленияНДС.АналитикаРаспределенияЗатрат
	|			И ДанныеРАУЗСПартиямиНДС.АналитикаУчетаНДС = ТаблицаДляВосстановленияНДС.АналитикаУчетаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетПартий
	|ИТОГИ
	|	МАКСИМУМ(АналитикаВидаУчета),
	|	МАКСИМУМ(АналитикаУчетаЗатрат),
	|	МАКСИМУМ(АналитикаРаспределенияЗатрат),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(КорАналитикаВидаУчета),
	|	МАКСИМУМ(КорАналитикаУчетаЗатрат),
	|	МАКСИМУМ(КорАналитикаРаспределенияЗатрат)
	|ПО
	|	НомерСтроки";
	
	Возврат Текст;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПровестиДокументПоРаздельномуУчетуНДС(Документ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("МоментИсключая", Новый Граница(Документ.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Период", Документ.Дата);
	Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияДокументаПоРаздельномуУчетуНДС();
	
	ТаблицаПартийСписания = РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуПартийСписанияНДС();
	
	СтруктураРесурсов = Новый Структура;
	СтруктураРесурсов.Вставить("ТекущееКоличество", 0);
	СтруктураРесурсов.Вставить("СуммаБезНДС", 0);
	СтруктураРесурсов.Вставить("НДС", 0);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ОсталосьРаспределить = ВыборкаИтоги.Количество;
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ОсталосьРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;	
			
			АналитикаУчетаНДСПолучатель = ПолучитьНовуюАналитикуУчетаНДССогласноПодобраннымПартиям(Выборка);
			СтруктураРесурсов.ТекущееКоличество = Мин(ОсталосьРаспределить, Выборка.КоличествоОстаток);
			
			Если Выборка.НужноВосстанавливать Тогда
				ЗаписьВосстановление = СформироватьДвижениеВосстановлениеНДС(ТаблицаПартийСписания, Выборка, СтруктураРесурсов);
				СтруктураРесурсов.СуммаБезНДС = ЗаписьВосстановление.СуммаБезНДС;
				СтруктураРесурсов.НДС = ЗаписьВосстановление.НДС;
			Иначе
				СтруктураРесурсов.СуммаБезНДС = Выборка.СуммаБезНДСОстаток / Выборка.КоличествоОстаток * СтруктураРесурсов.ТекущееКоличество;
				СтруктураРесурсов.НДС	= Выборка.НДСОстаток / Выборка.КоличествоОстаток * СтруктураРесурсов.ТекущееКоличество;
			КонецЕсли;
			
			ЗаписьОтправитель = Неопределено;
			Если Выборка.АналитикаУчетаНДСОстатков <> АналитикаУчетаНДСПолучатель Тогда
				ЗаписьОтправитель = СформироватьДвижениеИзменениеАналитикиУчетаНДС(ТаблицаПартийСписания, Выборка, АналитикаУчетаНДСПолучатель, СтруктураРесурсов);
			КонецЕсли;
			
			Если Выборка.СчетУчетаПолучатель.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
				Или Выборка.СчетУчетаПолучатель.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
				КорАналитикаУчетаЗатрат = ПолучитьКлючАналитикиУчетаЗатрат(Выборка, Истина);
			Иначе
				КорАналитикаУчетаЗатрат = Выборка.КорАналитикаУчетаЗатрат;
			КонецЕсли;	
			
			ЗаписьРасход = ТаблицаПартийСписания.Добавить();
			ЗаписьРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаписьРасход.АналитикаВидаУчета			  = Выборка.АналитикаВидаУчета;
			ЗаписьРасход.АналитикаУчетаЗатрат 		  = Выборка.АналитикаУчетаЗатрат;
			ЗаписьРасход.АналитикаРаспределенияЗатрат = Выборка.АналитикаРаспределенияЗатрат;
			ЗаписьРасход.АналитикаУчетаНДС 		  	  = Выборка.АналитикаУчетаНДСОстатков;
			Если ЗаписьОтправитель <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗаписьРасход, ЗаписьОтправитель,, "ВидДвижения, КорАналитикаВидаУчета, КорАналитикаУчетаЗатрат, КорАналитикаРаспределенияЗатрат, КорАналитикаУчетаНДС");
			КонецЕсли;	
			
			ЗаписьРасход.КорАналитикаВидаУчета			 = Выборка.КорАналитикаВидаУчета;
			ЗаписьРасход.КорАналитикаУчетаЗатрат 		 = КорАналитикаУчетаЗатрат;
			ЗаписьРасход.КорАналитикаРаспределенияЗатрат = Выборка.КорАналитикаРаспределенияЗатрат;
			ЗаписьРасход.КорАналитикаУчетаНДС 		     = АналитикаУчетаНДСПолучатель;
			
			ЗаписьРасход.Количество  = СтруктураРесурсов.ТекущееКоличество;
			ЗаписьРасход.СуммаБезНДС = СтруктураРесурсов.СуммаБезНДС;
			ЗаписьРасход.НДС		 = СтруктураРесурсов.НДС; 
			
			Если Выборка.РазделУчетаПолучатель = Перечисления.РазделыУчета.Затраты Тогда
				ЗаписьРасход.Событие = Перечисления.КБХА_СобытияНДСПокупки.НДССписанВПроизводство;
			КонецЕсли;	
			
			ОсталосьРаспределить = ОсталосьРаспределить - СтруктураРесурсов.ТекущееКоличество;
			
			Если Выборка.ФормироватьПриход Тогда
				ЗаписьПолучатель = СформироватьОбратнуюКорреспондирующуюЗапись(ТаблицаПартийСписания, ЗаписьРасход);
				Если Выборка.НовыйСпособУчетаНДС = Перечисления.КР_СпособыУчетаНДС.УчитываетсяВСтоимости Тогда
					СформироватьДвижениеСписаниеНДСВСтоимость(ТаблицаПартийСписания, ЗаписьПолучатель, Выборка);
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	СформироватьДвиженияПоРезультатамСписания(ТаблицаПартийСписания, Документ);
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодготовитьСтруктуруНаборовЗаписей(Регистратор)
	
	СтруктураНаборов = Новый Структура;
	ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		"КБХА_РаздельныйУчетНДС", 
		Регистратор, 
		"РегистрНакопления.КБХА_РаздельныйУчетНДС",
		РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуДляФормированияДвиженийПоРегиструКБХА_РаздельныйУчетНДС(),
	);
	ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		"Хозрасчетный",
		Регистратор,
		"РегистрБухгалтерии.Хозрасчетный",
		РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуДляФормированияДвиженийПоРегиструХозрасчетный(),
		Ложь,
		"СписаниеПартий"
	);
	
	ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		"НДСПредъявленный",
		Регистратор,
		"РегистрНакопления.НДСПредъявленный",
		РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуДляФормированияДвижениеПоРегиструНДСПредъявленый()
	);
	
	ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		"НДСЗаписиКнигиПродаж",
		Регистратор,
		"РегистрНакопления.НДСЗаписиКнигиПродаж",
		РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуДляФормированияДвижениеПоРегиструНДСЗаписиКнигиПродаж()
	);
	
	ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		"УчетЗатратРегл",
		Регистратор,
		"РегистрНакопления.УчетЗатратРегл",
		РегистрыНакопления.КБХА_РаздельныйУчетНДС.ПодготовитьТаблицуДляФормированияДвижениеПоРегиструУчетЗатратРегл(),
		Ложь,
		"КР_СписаниеПартийНДС"
	);
	
	Возврат СтруктураНаборов;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьЭлементВСтруктуруНаборовЗаписей(
		СтруктураНаборов,
		ИмяНабораЗаписей,
		Регистратор,
		ПолноеИмяРегистра,
		ТаблицаФормированияДвижений,
		Замещать=Истина,
		ИмяРеквизитаСписаниеПартий=""
	)
	
	МенеджерНабора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
	НаборЗаписей = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Регистратор, МенеджерНабора);
	
	СтруктураПараметровНабора = Новый Структура;
	СтруктураПараметровНабора.Вставить("Регистратор", Регистратор);
	СтруктураПараметровНабора.Вставить("НаборЗаписей", НаборЗаписей);
	СтруктураПараметровНабора.Вставить("ТаблицаФормированияДвижений", ТаблицаФормированияДвижений);
	СтруктураПараметровНабора.Вставить("Замещать", Замещать);
	СтруктураПараметровНабора.Вставить("ИмяРеквизитаСписаниеПартий", ИмяРеквизитаСписаниеПартий);
	
	СтруктураНаборов.Вставить(ИмяНабораЗаписей, СтруктураПараметровНабора);

КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ДобавитьДвиженияПоВосстановлениюНДС_Хозрасчетный(Источник, СтруктураНаборовЗаписей)
	
	ПВХ_СубконтоХозрасчетные = СтандартныеПодсистемыПовтИсп.СсылкиПоИменамПредопределенных("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные");
			
	НоваяСтрока = СтруктураНаборовЗаписей.Хозрасчетный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.Организация = Источник.Организация; 
	
	НоваяСтрока.СчетДт = Источник.СчетУчетаНДС;
	НоваяСтрока.СубконтоДт1 = Источник.Контрагент;
	НоваяСтрока.СубконтоДт2 = Источник.СчетФактура;
	НоваяСтрока.СубконтоДт3 = Источник.СтарыйСпособУчетаНДС;                        
	НоваяСтрока.ВидСубконтоДт1 = ПВХ_СубконтоХозрасчетные.Получить("Контрагенты");
	НоваяСтрока.ВидСубконтоДт2 = ПВХ_СубконтоХозрасчетные.Получить("СФПолученные");
	НоваяСтрока.ВидСубконтоДт3 = ПВХ_СубконтоХозрасчетные.Получить("КР_СпособыУчетаНДС");
	
	НоваяСтрока.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
	НоваяСтрока.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	НоваяСтрока.ВидСубконтоКт1 = ПВХ_СубконтоХозрасчетные.Получить("ВидыПлатежейВГосБюджет");
	
	НоваяСтрока.Сумма = Источник.НДС;
	
	НоваяСтрока.Содержание = "Восстановлен НДС";
	НоваяСтрока.СписаниеПартий = Истина;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВключениюНДСВСтоимость_Хозрасчетный(Источник, СтруктураНаборовЗаписей)

	ПВХ_СубконтоХозрасчетные = СтандартныеПодсистемыПовтИсп.СсылкиПоИменамПредопределенных("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные");
			
	НоваяСтрока = СтруктураНаборовЗаписей.Хозрасчетный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.Организация = Источник.Организация; 
	
	НоваяСтрока.СчетДт = Источник.СчетУчета;
	НоваяСтрока.СубконтоДт1 = Источник.ПодразделениеОрганизации;
	НоваяСтрока.СубконтоДт2 = Источник.НоменклатурнаяГруппа;
	НоваяСтрока.СубконтоДт3 = Источник.СтатьяЗатратВключениеНДСВСтоимость;                        
	НоваяСтрока.ВидСубконтоДт1 = ПВХ_СубконтоХозрасчетные.Получить("Подразделения");
	НоваяСтрока.ВидСубконтоДт2 = ПВХ_СубконтоХозрасчетные.Получить("НоменклатурныеГруппы");
	НоваяСтрока.ВидСубконтоДт3 = ПВХ_СубконтоХозрасчетные.Получить("СтатьиЗатрат");
	
	НоваяСтрока.СчетКт = Источник.СчетУчетаНДС;
	НоваяСтрока.СубконтоКт1 = Источник.Контрагент;
	НоваяСтрока.СубконтоКт2 = Источник.СчетФактура;
	НоваяСтрока.СубконтоКт3 = Источник.НовыйСпособУчетаНДС;
	НоваяСтрока.ВидСубконтоКт1 = ПВХ_СубконтоХозрасчетные.Получить("Контрагенты");
	НоваяСтрока.ВидСубконтоКт2 = ПВХ_СубконтоХозрасчетные.Получить("СФПолученные");
	НоваяСтрока.ВидСубконтоКт3 = ПВХ_СубконтоХозрасчетные.Получить("КР_СпособыУчетаНДС");
	
	НоваяСтрока.Сумма = Источник.НДС;
	
	НоваяСтрока.Содержание = "Включение НДС в стоимость";
	НоваяСтрока.СписаниеПартий = Истина;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВосстановлениюНДС_НДСПредъявленный(Источник, СтруктураНаборовЗаписей)

	НоваяСтрока = СтруктураНаборовЗаписей.НДСПредъявленный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.ВидДвижения 	  = ВидДвиженияНакопления.Расход; // Восстановление пишем как сторно расхода
	НоваяСтрока.Организация 	  = Источник.Организация;
	НоваяСтрока.СчетФактура 	  = Источник.СчетФактура;
	НоваяСтрока.ВидЦенности 	  = Источник.ВидЦенности;
	НоваяСтрока.СтавкаНДС   	  = Источник.СтавкаНДС;
	НоваяСтрока.СчетУчетаНДС 	  = Источник.СчетУчетаНДС;
	НоваяСтрока.Поставщик 		  = Источник.Контрагент;
	НоваяСтрока.КР_СпособУчетаНДС = Источник.СтарыйСпособУчетаНДС;
	
	НоваяСтрока.СуммаБезНДС = - Источник.СуммаБезНДС;
	НоваяСтрока.НДС 		= - Источник.НДС;
	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ВосстановленНДС;
	НоваяСтрока.ДатаСобытия = Источник.Период;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВключениюНДСВСтоимость_Предъявленный(Источник, СтруктураНаборовЗаписей)

	НоваяСтрока = СтруктураНаборовЗаписей.НДСПредъявленный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.ВидДвижения 	  = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Организация 	  = Источник.Организация;
	НоваяСтрока.СчетФактура 	  = Источник.СчетФактура;
	НоваяСтрока.ВидЦенности 	  = Источник.ВидЦенности;
	НоваяСтрока.СтавкаНДС   	  = Источник.СтавкаНДС;
	НоваяСтрока.СчетУчетаНДС 	  = Источник.СчетУчетаНДС;
	НоваяСтрока.Поставщик 		  = Источник.Контрагент;
	НоваяСтрока.КР_СпособУчетаНДС = Источник.НовыйСпособУчетаНДС;
	
	НоваяСтрока.СуммаБезНДС = Источник.СуммаБезНДС;
	НоваяСтрока.НДС 		= Источник.НДС;
	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
	НоваяСтрока.ДатаСобытия = Источник.Период;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВосстановлениюНДС_НДСЗаписиКнигиПродаж(Источник, СтруктураНаборовЗаписей)
	
	НоваяСтрока = СтруктураНаборовЗаписей.НДСЗаписиКнигиПродаж.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.Организация = Источник.Организация;
	НоваяСтрока.Покупатель  = Источник.Контрагент;
	НоваяСтрока.СчетФактура = Источник.СчетФактура;
	НоваяСтрока.ВидЦенности = Источник.ВидЦенности;
	НоваяСтрока.СтавкаНДС   = Источник.СтавкаНДС;
	НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
	НоваяСтрока.ДатаСобытия = Источник.Период;
	
	НоваяСтрока.СуммаБезНДС = Источник.СуммаБезНДС;
	НоваяСтрока.НДС 		= Источник.НДС;
	
    НоваяСтрока.КодВидаОперации = "21";
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоИзменениюСпособаУчетаНДС_Хозрасчетный(Источник, СтруктураНаборовЗаписей)

	ПВХ_СубконтоХозрасчетные = СтандартныеПодсистемыПовтИсп.СсылкиПоИменамПредопределенных("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные");
	
	НоваяСтрока = СтруктураНаборовЗаписей.Хозрасчетный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.Организация = Источник.Организация; 
	
	НоваяСтрока.СчетДт = Источник.СчетУчетаНДС;
	НоваяСтрока.СубконтоДт1 = Источник.Контрагент;
	НоваяСтрока.СубконтоДт2 = Источник.СчетФактура;
	НоваяСтрока.СубконтоДт3 = Источник.НовыйСпособУчетаНДС;
	НоваяСтрока.ВидСубконтоДт1 = ПВХ_СубконтоХозрасчетные.Получить("Контрагенты");
	НоваяСтрока.ВидСубконтоДт2 = ПВХ_СубконтоХозрасчетные.Получить("СФПолученные");
	НоваяСтрока.ВидСубконтоДт3 = ПВХ_СубконтоХозрасчетные.Получить("КР_СпособыУчетаНДС");
	
	НоваяСтрока.СчетКт = Источник.СчетУчетаНДС;
	НоваяСтрока.СубконтоКт1 = Источник.Контрагент;
	НоваяСтрока.СубконтоКт2 = Источник.СчетФактура;
	НоваяСтрока.СубконтоКт3 = Источник.СтарыйСпособУчетаНДС;
	НоваяСтрока.ВидСубконтоКт1 = ПВХ_СубконтоХозрасчетные.Получить("Контрагенты");
	НоваяСтрока.ВидСубконтоКт2 = ПВХ_СубконтоХозрасчетные.Получить("СФПолученные");
	НоваяСтрока.ВидСубконтоКт3 = ПВХ_СубконтоХозрасчетные.Получить("КР_СпособыУчетаНДС");
	
	НоваяСтрока.Сумма = Источник.НДС;
	
	НоваяСтрока.Содержание = "Корректировка способа учета НДС";
	НоваяСтрока.СписаниеПартий = Истина;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоИзменениюСпособаУчетаНДС_НДСПредъявленный(Источник, СтруктураНаборовЗаписей)

	НоваяСтрока = СтруктураНаборовЗаписей.НДСПредъявленный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.ВидДвижения 	  = ВидДвиженияНакопления.Расход; // Списание со старого способа учета
	НоваяСтрока.Организация 	  = Источник.Организация;
	НоваяСтрока.СчетФактура 	  = Источник.СчетФактура;
	НоваяСтрока.ВидЦенности 	  = Источник.ВидЦенности;
	НоваяСтрока.СтавкаНДС   	  = Источник.СтавкаНДС;
	НоваяСтрока.СчетУчетаНДС 	  = Источник.СчетУчетаНДС;
	НоваяСтрока.Поставщик 		  = Источник.Контрагент;
	НоваяСтрока.КР_СпособУчетаНДС = Источник.СтарыйСпособУчетаНДС;
	
	НоваяСтрока.СуммаБезНДС = Источник.СуммаБезНДС;
	НоваяСтрока.НДС 		= Источник.НДС;
	НоваяСтрока.ДатаСобытия = Источник.Период;

	НоваяСтрока = СтруктураНаборовЗаписей.НДСПредъявленный.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.ВидДвижения 	  = ВидДвиженияНакопления.Приход; // Оприходование на новый способ учета
	НоваяСтрока.Организация 	  = Источник.Организация;
	НоваяСтрока.СчетФактура 	  = Источник.СчетФактура;
	НоваяСтрока.ВидЦенности 	  = Источник.ВидЦенности;
	НоваяСтрока.СтавкаНДС   	  = Источник.СтавкаНДС;
	НоваяСтрока.СчетУчетаНДС 	  = Источник.СчетУчетаНДС;
	НоваяСтрока.Поставщик 		  = Источник.Контрагент;
	НоваяСтрока.КР_СпособУчетаНДС = Источник.НовыйСпособУчетаНДС;
	
	НоваяСтрока.СуммаБезНДС = Источник.СуммаБезНДС;
	НоваяСтрока.НДС 		= Источник.НДС;
	НоваяСтрока.ДатаСобытия = Источник.Период;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВключениюНДСВСтоимость_УчетЗатратРегл(Источник, СтруктураНаборовЗаписей)

	НоваяСтрока = СтруктураНаборовЗаписей.УчетЗатратРегл.ТаблицаФормированияДвижений.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.АналитикаВидаУчета 			 = Источник.КорАналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаЗатрат 		 = Источник.КорАналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаРаспределенияЗатрат = Источник.КорАналитикаРаспределенияЗатрат;
	НоваяСтрока.АналитикаУчетаПартий 		 = КР_ОбщегоНазначенияПовтИсп.ПолучитьПустойКлючАналитикиУчетаПартий();
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
	НоваяСтрока.Стоимость = Источник.НДС;
	НоваяСтрока.СтоимостьНУ = Источник.НДС;
	НоваяСтрока.КР_СписаниеПартийНДС = Истина;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаписатьНаборыЗаписейВБазу(СтруктураНаборовЗаписей)

	Для каждого ЭлементСтруктуры Из СтруктураНаборовЗаписей Цикл
		
		Если ЭлементСтруктуры.Значение.Замещать Тогда
			ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ЭлементСтруктуры.Значение.НаборЗаписей, ЭлементСтруктуры.Значение.ТаблицаФормированияДвижений);
			ЭлементСтруктуры.Значение.НаборЗаписей.Записать(Истина);
		Иначе
			ЭлементСтруктуры.Значение.НаборЗаписей.Прочитать();
			Индекс = 0;
			Пока Индекс < ЭлементСтруктуры.Значение.НаборЗаписей.Количество() Цикл
				Если ЭлементСтруктуры.Значение.НаборЗаписей[Индекс][ЭлементСтруктуры.Значение.ИмяРеквизитаСписаниеПартий] Тогда
					ЭлементСтруктуры.Значение.НаборЗаписей.Удалить(Индекс);
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ЭлементСтруктуры.Значение.НаборЗаписей, ЭлементСтруктуры.Значение.ТаблицаФормированияДвижений);
			ЭлементСтруктуры.Значение.НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьДвиженияПоРезультатамСписания(ТаблицаСписания, Регистратор)
	
	СтруктураНаборовЗаписей = ПодготовитьСтруктуруНаборовЗаписей(Регистратор);
	СтруктураНаборовЗаписей.КБХА_РаздельныйУчетНДС.ТаблицаФормированияДвижений = ТаблицаСписания;
	
	Для каждого Строка Из ТаблицаСписания Цикл
		
		Если Строка.СобытиеНаборовЗаписей = "ВосстановлениеНДС" Тогда
			ДобавитьДвиженияПоВосстановлениюНДС(Строка, СтруктураНаборовЗаписей);
		КонецЕсли;
		
		Если Строка.СобытиеНаборовЗаписей = "ИзменениеСпособаУчетаНДС" Тогда
			ДобавитьДвиженияПоИзменениюСпопобаУчетаНДС(Строка, СтруктураНаборовЗаписей);
		КонецЕсли;	
		
		Если Строка.СобытиеНаборовЗаписей = "ВключениеНДСВСтоимость" Тогда
			ДобавитьДвиженияПоВключениюНДСВСтоимость(Строка, СтруктураНаборовЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьНаборыЗаписейВБазу(СтруктураНаборовЗаписей);

КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВосстановлениюНДС(Источник, СтруктураНаборовЗаписей)
	
	ДобавитьДвиженияПоВосстановлениюНДС_Хозрасчетный(Источник, СтруктураНаборовЗаписей);
	ДобавитьДвиженияПоВосстановлениюНДС_НДСПредъявленный(Источник, СтруктураНаборовЗаписей);
	ДобавитьДвиженияПоВосстановлениюНДС_НДСЗаписиКнигиПродаж(Источник, СтруктураНаборовЗаписей);

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоИзменениюСпопобаУчетаНДС(Источник, СтруктураНаборовЗаписей)
	
	ДобавитьДвиженияПоИзменениюСпособаУчетаНДС_Хозрасчетный(Источник, СтруктураНаборовЗаписей);
	ДобавитьДвиженияПоИзменениюСпособаУчетаНДС_НДСПредъявленный(Источник, СтруктураНаборовЗаписей);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьДвиженияПоВключениюНДСВСтоимость(Источник, СтруктураНаборовЗаписей)

	ДобавитьДвиженияПоВключениюНДСВСтоимость_Хозрасчетный(Источник, СтруктураНаборовЗаписей);
	ДобавитьДвиженияПоВключениюНДСВСтоимость_Предъявленный(Источник, СтруктураНаборовЗаписей);
	ДобавитьДвиженияПоВключениюНДСВСтоимость_УчетЗатратРегл(Источник, СтруктураНаборовЗаписей);

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнениеКнигиПокупокРаздельныйУчетНДС(Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецКвартала(Документ.Дата), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаВидаУчета,
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаЗатрат,
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаРаспределенияЗатрат,
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаНДС,
	|	КБХА_РаздельныйУчетНДСОстатки.КоличествоОстаток КАК КоличествоКВычету,
	|	КБХА_РаздельныйУчетНДСОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	КБХА_РаздельныйУчетНДСОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.КБХА_РаздельныйУчетНДС.Остатки(&Период, ) КАК КБХА_РаздельныйУчетНДСОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ПО КБХА_РаздельныйУчетНДСОстатки.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ПО КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|		ПО КБХА_РаздельныйУчетНДСОстатки.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|ГДЕ
	|	КБХА_РаздельныйУчетНДСОстатки.АналитикаУчетаНДС.КР_СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.КР_СпособыУчетаНДС.ПринимаетсяКВычету)";
	
	Документ.КБХА_ВычетПоРаздельномуУчетуНДС.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура КБХА_ПроведениеКнигиПокупокПоРаздельномуУчетуНДСОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Для каждого Строка Из Источник.КБХА_ВычетПоРаздельномуУчетуНДС Цикл
		ЗаписьРасход = Источник.Движения.КБХА_РаздельныйУчетНДС.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(ЗаписьРасход, Строка);
		ЗаписьРасход.Период = Источник.Дата;
		ЗаписьРасход.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьКлючАналитикиУчетаЗатрат(Строка, УчетЗатратПоНоменклатуре = Ложь)
	
	ПараметрыАналитики = Новый Структура;
	
	ПараметрыАналитики.Вставить("Затрата");
	ПараметрыАналитики.Вставить("ХарактеристикаЗатраты");
	ПараметрыАналитики.Вставить("СерияЗатраты");	
	ПараметрыАналитики.Вставить("СтатьяЗатрат");
	ПараметрыАналитики.Вставить("ХарактерЗатрат");
	
    ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.СчетУчета, Строка.СтатьяЗатрат);
	Если УчетЗатратПоНоменклатуре Тогда
		ПараметрыАналитики.Затрата = Строка.Затрата;
		ПараметрыАналитики.ХарактеристикаЗатраты = Строка.ХарактеристикаЗатраты;
		ПараметрыАналитики.СерияЗатраты = Строка.СерияЗатраты;
		ПараметрыАналитики.Вставить("УчетЗатратПоНоменклатуре", Истина);
	КонецЕсли;
	
	ПараметрыАналитики.СтатьяЗатрат = Строка.СтатьяЗатрат;
	ПараметрыАналитики.ХарактерЗатрат = ХарактерЗатрат;
	
	СтруктураКлючиАналитики = Новый Структура;
	СтруктураШапкиДокумента = Новый Структура;
	АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		ПараметрыАналитики,
		Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
		СтруктураКлючиАналитики
	);
	
	Возврат АналитикаУчетаЗатрат;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтатьюЗатратНДСДляВключенияВСтоимость(Параметры, ВыборкаПоПартиям)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаНДС", Параметры.СчетУчетаНДС);
	Запрос.УстановитьПараметр("СчетЗатрат", Параметры.СчетЗатрат);
	Запрос.УстановитьПараметр("ИсходнаяСтатьяЗатрат", Параметры.ИсходнаяСтатьяЗатрат);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов КАК КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов
	|ГДЕ
	|	КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов.СчетУчетаНДС = &СчетУчетаНДС
	|	И КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов.СчетЗатрат = &СчетЗатрат
	|	И КР_НастройкаСтатейЗатратПриРаспределенииНДСкосвенныхРасходов.ИсходнаяСтатьяЗатрат = &ИсходнаяСтатьяЗатрат";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации(
			"Ошибка включения НДС в стомость",
			СтрШаблон(
				"При попытке включения НДС в стоимость для документа %1, произошла ошибка: 
				|	Не найдена статья затрат НДС по параметрам: 
				|		- Счет учета НДС: %2
				|		- Счет затрат: %3
				|		- Исходная статья затрат: %4
				|Проверьте настройки статей в регистре ""Настройка статей затрат при распределении НДС косвенных расходов""",
				ВыборкаПоПартиям.Регистратор,
				Параметры.СчетУчетаНДС,
				Параметры.СчетЗатрат,
				Параметры.ИсходнаяСтатьяЗатрат
			)
		);
		Возврат Справочники.СтатьиЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СтатьяЗатрат;

КонецФункции


